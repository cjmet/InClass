@page "/"
@using Mud.Data;
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json;
@using System.Diagnostics;



<div style="border: black 1px solid; padding: 1em;">

    @{

        if (_products != null)
        {
            <MudDataGrid @ref="mudDataGrid" T="Product" Items="@_products" ReadOnly="false"
                         StartedEditingItem="@StartedEditingItem"
                         CanceledEditingItem="@CanceledEditingItem"
                         CommittedItemChanges="@CommittedItemChanges"
                         DeleteItem
                         Filterable="true" SortMode="SortMode.Multiple"
                         Groupable="true" Dense="true" Striped="true" Bordered="true"
                         FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
                <Columns>
                    <PropertyColumn Property="p => p.Id" />
                    <PropertyColumn Property="p => p.Brand" />
                    <PropertyColumn Property="p => p.Name" />
                    <PropertyColumn Property="p => p.Description" />
                    <PropertyColumn Property="p => p.Quantity" />
                    <PropertyColumn Property="p => p.Price" />
                    <TemplateColumn Title="Delete" Hidden="false">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(()=>DeleteProduct(context.Item))" />
                        </CellTemplate>

                    </TemplateColumn>

                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Product" />
                </PagerContent>
            </MudDataGrid>
        }

        <MudExpansionPanels Style="flex:1">
            <MudExpansionPanel Text="Show Events">
                @foreach (var message in _events)
                {
                    <MudText Typo="@Typo.body2">@message</MudText>
                }
                @if (_events.Count > 0)
                {
                    <div class="d-flex">
                        <MudSpacer />
                        <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                    </div>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>



    }

</div>
<br />

@code {
    private MudDataGrid<Product> mudDataGrid;
    private List<string> _events = new();
    private List<Product> _products = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _products = TestIProducts.GetTestProducts().Select(p => p.Value).Cast<Product>().ToList();
        _events.Insert(0, $"Event = OnInitializedAsync, Data = {_products.Count}");
    }

    void StartedEditingItem(Product item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Product item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Product item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void DeleteProduct(Product item)
    {
        _events.Insert(0, $"Event = DeleteProduct, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        _products.Remove(item);

    }
}

